
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.4
  creationTimestamp: null
  name: hookaction.apps.k8s.io
spec:
  group: apps.k8s.io
  names:
    categories:
    - hookaction
    kind: HookAction
    listKind: HookActionList
    plural: hookaction
    shortNames:
    - ha
    singular: hookaction
  scope: Namespaced
  validation:
    openAPIV3Schema:
      description: HookAction describes action commands to run on pods/containers
        based on specified policies. HookAction will be created by the user and can
        be re-used later. Snapshot Controller will create ExecutionHooks based on
        HookActions specified in the snapshot spec. For example, two HookActions,
        preSnapshotExecutionHook and postSnapshotExecutionHook, are expected in the
        snapshot spec. HookAction does not contain information on pods/containers
        because those are runtime info. HookAction is namespaced
      properties:
        action:
          description: This contains the command to run in a container. The command
            should be idempotent because the system does not guarantee exactly-once
            semantics. Any action may be triggered more than once but only the latest
            results will be logged in status. As alpha feature, only ExecAction type
            in Handler will be supported, not the HTTPGETAction or TCPSocketAction.
            This is required.
          properties:
            exec:
              description: One and only one of the following should be specified.
                Exec specifies the action to take.
              properties:
                command:
                  description: Command is the command line to execute inside the container,
                    the working directory for the command  is root ('/') in the container's
                    filesystem. The command is simply exec'd, it is not run inside
                    a shell, so traditional shell instructions ('|', etc) won't work.
                    To use a shell, you need to explicitly call out to that shell.
                    Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                  items:
                    type: string
                  type: array
              type: object
            httpGet:
              description: HTTPGet specifies the http request to perform.
              properties:
                host:
                  description: Host name to connect to, defaults to the pod IP. You
                    probably want to set "Host" in httpHeaders instead.
                  type: string
                httpHeaders:
                  description: Custom headers to set in the request. HTTP allows repeated
                    headers.
                  items:
                    description: HTTPHeader describes a custom header to be used in
                      HTTP probes
                    properties:
                      name:
                        description: The header field name
                        type: string
                      value:
                        description: The header field value
                        type: string
                    required:
                    - name
                    - value
                    type: object
                  type: array
                path:
                  description: Path to access on the HTTP server.
                  type: string
                port:
                  anyOf:
                  - type: integer
                  - type: string
                  description: Name or number of the port to access on the container.
                    Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                  x-kubernetes-int-or-string: true
                scheme:
                  description: Scheme to use for connecting to the host. Defaults
                    to HTTP.
                  type: string
              required:
              - port
              type: object
            tcpSocket:
              description: 'TCPSocket specifies an action involving a TCP port. TCP
                hooks not yet supported TODO: implement a realistic TCP lifecycle
                hook'
              properties:
                host:
                  description: 'Optional: Host name to connect to, defaults to the
                    pod IP.'
                  type: string
                port:
                  anyOf:
                  - type: integer
                  - type: string
                  description: Number or name of the port to access on the container.
                    Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                  x-kubernetes-int-or-string: true
              required:
              - port
              type: object
          type: object
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        timeoutSeconds:
          description: TimeoutSeconds defines when the execution hook controller should
            stop retrying. If execution fails, the execution hook controller will
            keep retrying until reaching TimeoutSeconds. If execution still fails
            or hangs, execution hook controller stops retrying and updates executionhook
            status to failed. If controller loses its state, counter restarts. In
            this case, controller will retry for at least this long, before stopping.
            Once an action is started, controller has no way to stop it even if TimeoutSeconds
            is exceeded. This simply controls if retry happens or not. retry is based
            on exponential backoff policy. If TimeoutSeconds is not specified, it
            will retry until the hook object is deleted.
          format: int64
          type: integer
      required:
      - action
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
